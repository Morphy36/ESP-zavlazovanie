# --- Začiatok Finálne Opraveného Kódu ---  
esphome:  
  name: vonkajsia-stanica  

  on_boot:  
    priority: 900  
    then:  
      - logger.log: "ON_BOOT: Zapínam napájanie senzorov..."  
      - output.turn_on: rain_sensor_power  
      - output.turn_on: i2c_sensor_power  
      - delay: 3s  
      - logger.log: "ON_BOOT: Napájanie stabilizované. Pokračuje štart."  
      - component.update: battery_voltage  
      - delay: 100ms  
      - component.update: bme280_sensor  

  on_shutdown:  
    then:  
      - logger.log: "Zariadenie sa vypína (prechod do deep sleep)"  
      - script.execute: uspat_ltr390  
      - delay: 500ms  
      - output.turn_off: rain_sensor_power  
      - output.turn_off: i2c_sensor_power  
      - logger.log: "Senzory uspané a vypnuté. Prechod do deep sleep na 5 minút."  

esp32:  
  board: esp32dev  

wifi:  
  ssid: !secret wifi_ssid  
  password: !secret wifi_password  
  power_save_mode: light  
  fast_connect: true  
  reboot_timeout: 5min  

  ap:  
    ssid: "Vonkajsia Stanica Hotspot"  
    password: "esp32admin"  
    ap_timeout: 3min  

time:  
  - platform: homeassistant  
    id: homeassistant_time  

logger:  
  level: DEBUG  
  baud_rate: 115200  

api:  
  id: api_server  
  reboot_timeout: 0s  

ota:  
  platform: esphome  
  password: "esp32admin"  

web_server:  
  port: 80  

i2c:  
  sda: GPIO22  
  scl: GPIO21  
  scan: true  
  id: busa  
  frequency: 100kHz  

output:  
  - platform: gpio  
    pin: { number: GPIO18, mode: { output: true, open_drain: true }, inverted: true }  
    id: rain_sensor_power  
  - platform: gpio  
    pin: { number: GPIO19, mode: { output: true }, inverted: true }  
    id: i2c_sensor_power  

switch:  
  - platform: template  
    name: "Napájanie senzorov (SW)"  
    id: software_power  
    optimistic: true  
    restore_mode: RESTORE_DEFAULT_ON  
    icon: mdi:power  
    turn_on_action:  
      - logger.log: "Software prepínač zapnutý - zapnutie senzorov"  
      - output.turn_on: rain_sensor_power  
      - output.turn_on: i2c_sensor_power  
    turn_off_action:  
      - logger.log: "Software prepínač vypnutý - vypnutie senzorov"  
      - output.turn_off: rain_sensor_power  
      - output.turn_off: i2c_sensor_power  
  - platform: template  
    name: "Vynútiť Deep Sleep"  
    id: deep_sleep_switch  
    optimistic: true  
    icon: mdi:sleep  
    turn_on_action:  
      - logger.log: "Vynucujem prechod do deep sleep..."  
      - deep_sleep.enter: deep_sleep_control  
    turn_off_action:  
      - logger.log: "Prepínač Vynútiť Deep Sleep vypnutý (bez akcie)."  

binary_sensor:  
  - platform: status  
    name: "Vonkajsia Stanica Status"  
    id: system_status  

  - platform: template  
    name: "Detekcia dažďa"  
    id: rain_detection  
    lambda: |-  
      auto sensor = id(rain_sensor_percent);  
      return sensor && sensor->has_state() && sensor->state > 5.0f;  
    filters:  
      - delayed_on: 5s  
      - delayed_off: 5s  
    device_class: "moisture"  

  - platform: template  
    name: "Kritická batéria"  
    id: low_battery  
    device_class: "battery"  
    lambda: |-  
      auto sensor = id(battery_voltage);  
      return sensor && sensor->has_state() && sensor->state < 3.0f;  
    filters:  
      - delayed_on: 10s  

  - platform: template  
    name: "Predikcia dažďa"  
    id: rain_prediction  
    lambda: |-  
      static float last_pressure = NAN;  
      auto pressure_sensor = id(bme280_pressure);  
      if (!pressure_sensor || !pressure_sensor->has_state()) {  
        return {};  
      }  
      float current_pressure = pressure_sensor->state;  

      if (isnan(last_pressure)) {  
        last_pressure = current_pressure;  
        return false;  
      }  

      float pressure_change = current_pressure - last_pressure;  
      last_pressure = current_pressure;  

      if (pressure_change < -1.0f) {  
        ESP_LOGD("rain_prediction", "Pressure drop detected (%.2f hPa). Predicting rain.", pressure_change);  
        return true;  
      } else {  
        return false;  
      }  

deep_sleep:  
  run_duration: 60s  
  sleep_duration: 5min  
  id: deep_sleep_control  

script:  
  - id: uspat_ltr390  
    then:  
      - logger.log: "Uspávam LTR390..."  
      - lambda: |-  
          auto bus = id(busa);  
          if (bus) {  
            uint8_t standby_cmd[] = {0x00, 0x00};  
            if (bus->write(0x53, standby_cmd, sizeof(standby_cmd)) == esphome::i2c::ERROR_OK) {  
              ESP_LOGD("custom", "Sent standby command to LTR390 (0x53)");  
            } else {  
              ESP_LOGE("custom", "Failed to send standby command to LTR390 (0x53)");  
            }  
          } else {  
             ESP_LOGE("custom", "I2C bus 'busa' not found for LTR390 sleep command.");  
          }  

text_sensor:  
  - platform: template  
    name: "System Diagnostika"  
    id: system_diagnostics  
    icon: mdi:graph-box  
    entity_category: diagnostic  
    lambda: |-  
      char buffer[200];  
      auto batt_volt_sensor = id(battery_voltage);  
      auto batt_level_sensor = id(battery_level);  
      auto wifi_sensor = id(wifi_signal_strength);  
      auto temp_sensor = id(bme280_temperature);  
      auto hum_sensor = id(bme280_humidity);  

      float battery_voltage_val = (batt_volt_sensor && batt_volt_sensor->has_state()) ? batt_volt_sensor->state : NAN;  
      float battery_level_val = (batt_level_sensor && batt_level_sensor->has_state()) ? batt_level_sensor->state : NAN;  
      float wifi_signal_val = (wifi_sensor && wifi_sensor->has_state()) ? wifi_sensor->state : NAN;  
      float temp_val = (temp_sensor && temp_sensor->has_state()) ? temp_sensor->state : NAN;  
      float humidity_val = (hum_sensor && hum_sensor->has_state()) ? hum_sensor->state : NAN;  

      snprintf(buffer, sizeof(buffer),  
        "Bat:%.2fV(%.0f%%), WiFi:%.0fdBm, T:%.1f°C, H:%.1f%%",  
        isnan(battery_voltage_val) ? -1.0f : battery_voltage_val,  
        isnan(battery_level_val) ? -1.0f : battery_level_val,  
        isnan(wifi_signal_val) ? 0.0f : wifi_signal_val,  
        isnan(temp_val) ? -99.9f : temp_val,  
        isnan(humidity_val) ? -99.9f : humidity_val);  
      return {buffer};  
    update_interval: 1min  

  - platform: template  
    name: "Odporúčanie oblečenia"  
    id: clothing_recommendation  
    icon: mdi:hanger  
    lambda: |-  
      auto rain_pred_sensor = id(rain_prediction);  
      auto temp_sensor = id(bme280_temperature);  

      if (!rain_pred_sensor || !temp_sensor || !rain_pred_sensor->has_state() || !temp_sensor->has_state()) {  
        return {"Čakám na dáta..."};  
      }  

      optional<bool> rain_predicted_opt = rain_pred_sensor->state;  
      float temperature = temp_sensor->state;  

      if (!rain_predicted_opt.has_value()) { return {"Čakám na dáta tlaku..."}; }  
      bool rain_predicted = rain_predicted_opt.value();  
      if (isnan(temperature)) { return {"Čakám na dáta teploty..."}; }  

      if (rain_predicted) {  
        if (temperature < 15) { return {"Vezmi si dáždnik a teplú bundu!"}; }  
        else { return {"Nezabudni na dáždnik!"}; }  
      } else {  
        if (temperature < 10) { return {"Obleč sa veľmi teplo!"}; }  
        else if (temperature < 20) { return {"Obleč sa teplo."}; }  
        else { return {"Obleč sa ľahko."}; }  
      }  
    update_interval: 1min  

sensor:  
  # --- Senzory pre Dážď ---  

  # 1. POMOCNÝ SENZOR NA KALIBRÁCIU - meria len surové napätie  
  - platform: adc  
    pin: GPIO34  
    name: "Dazdovy Senzor RAW Napatie"  
    id: rain_sensor_raw_voltage  
    entity_category: diagnostic  
    update_interval: 5s  
    accuracy_decimals: 3  
    unit_of_measurement: "V"  

  # 2. HLAVNÝ SENZOR - berie hodnotu z toho horného a prepočíta ju na percentá  
  - platform: template  
    name: "Vlhkosť dažďového senzora"  
    id: rain_sensor_percent  
    unit_of_measurement: "%"  
    accuracy_decimals: 1  
    state_class: "measurement"  
    lambda: |-  
      // DÔLEŽITÉ: Nahraď hodnoty nižšie tvojimi vlastnými nameranými hodnotami!  
      const float SUCHY_STAV_V = 1.152f;  
      const float MOKRY_STAV_V = 0.231f;  
      
      if (id(rain_sensor_raw_voltage).has_state()) {  
        float x = id(rain_sensor_raw_voltage).state;  
        
        // Mapovanie rozsahu napätia (sucho -> mokro) na percentá (0% -> 100%)  
        float percenta = map(x, SUCHY_STAV_V, MOKRY_STAV_V, 0.0f, 100.0f);  
        
        // Orezanie hodnoty medzi 0 a 100  
        return clamp(percenta, 0.0f, 100.0f);  
      } else {  
        return {}; // Vráti "unknown", ak RAW senzor nemá stav  
      }  
    update_interval: 10s  

  # --- OSTATNÉ SENZORY ---  
  - platform: bme280_i2c  
    address: 0x76  
    i2c_id: busa  
    id: bme280_sensor  
    update_interval: 10s  
    temperature:  
      name: "Vonkajšia Teplota"  
      id: bme280_temperature  
    pressure:  
      name: "Atmosférický tlak"  
      id: bme280_pressure  
    humidity:  
      name: "Vonkajšia Vlhkosť"  
      id: bme280_humidity  

  - platform: ltr390  
    address: 0x53  
    i2c_id: busa  
    id: ltr390_sensor  
    update_interval: 15s  
    uv:  
      name: "UV Index"  
      id: uv_index  
    light:  
      name: "Intenzita svetla"  
      id: ambient_light  

  - platform: adc  
    pin: GPIO35  
    name: "Napätie batérie"  
    id: battery_voltage  
    entity_category: diagnostic  
    update_interval: 30s  
    attenuation: 12db # Opravené z 11db  
    accuracy_decimals: 2  
    unit_of_measurement: "V"  
    state_class: "measurement"  
    device_class: "voltage"  
    icon: "mdi:battery-heart-variant"  
    filters:  
      - multiply: 2.0  
      - median: {window_size: 5, send_every: 1}  
      - sliding_window_moving_average: {window_size: 3, send_every: 1}  

  - platform: template  
    name: "Úroveň batérie"  
    id: battery_level  
    entity_category: diagnostic  
    unit_of_measurement: "%"  
    device_class: "battery"  
    lambda: |-  
      if (id(battery_voltage).has_state()) {  
        float voltage = id(battery_voltage).state;  
        const float V_MAX = 4.2f;  
        const float V_MIN = 3.0f;  
        float level = 100.0f * (voltage - V_MIN) / (V_MAX - V_MIN);  
        return clamp(level, 0.0f, 100.0f);  
      } else {  
        return {};  
      }  
    update_interval: 30s  

  - platform: wifi_signal  
    name: "WiFi Signál"  
    id: wifi_signal_strength  
    update_interval: 60s  
    entity_category: diagnostic  

# --- Koniec Kódu ---  
    
