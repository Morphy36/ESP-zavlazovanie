
# --- Začiatok Finálneho Kódu s Opravami a Vylepšeniami ---
esphome:
  name: vonkajsia-stanica
  on_boot:
    priority: 900
    then:
      - logger.log: "ON_BOOT: Zapínam napájanie senzorov..."
      - output.turn_on: rain_sensor_power
      - output.turn_on: i2c_sensor_power
      - delay: 5s
      - logger.log: "ON_BOOT: Napájanie stabilizované. Inicializujem senzory."
      - component.update: battery_voltage
      - delay: 100ms
      - component.update: bme280_sensor
      - delay: 200ms  # Dlhšie oneskorenie pre istotu
      - lambda: |-
          auto pressure_sensor = id(bme280_pressure);
          if (pressure_sensor->has_state()) {
            float current_pressure = pressure_sensor->state;
            int idx = id(history_index);
            ESP_LOGD("main", "Aktualizujem historiu tlaku na indexe %d s hodnotou %.2f", idx, current_pressure);
            switch(idx) {
              case 0: id(pressure_history_0) = current_pressure; break;
              case 1: id(pressure_history_1) = current_pressure; break;
              case 2: id(pressure_history_2) = current_pressure; break;
              case 3: id(pressure_history_3) = current_pressure; break;
              case 4: id(pressure_history_4) = current_pressure; break;
              case 5: id(pressure_history_5) = current_pressure; break;
            }
            id(history_index) = (idx + 1) % 6;
          } else {
            ESP_LOGW("main", "Nepodarilo sa aktualizovať históriu tlaku, senzor nemá stav.");
          }
      - component.update: ltr390_sensor
      - logger.log: "ON_BOOT: Inicializácia senzorov dokončená."
  on_shutdown:
    then:
      - logger.log: "Zariadenie sa vypína (prechod do deep sleep)"
      - script.execute: uspat_ltr390
      - delay: 500ms
      - output.turn_off: rain_sensor_power
      - output.turn_off: i2c_sensor_power
      - logger.log: "Senzory uspané a vypnuté. Prechod do deep sleep na 5 minút."

esp32:
  board: esp32dev

# Globals pre ukladanie histórie tlaku cez deep sleep
globals:
  - id: pressure_history_0
    type: float
    restore_value: yes
    initial_value: 'NAN'
  - id: pressure_history_1
    type: float
    restore_value: yes
    initial_value: 'NAN'
  - id: pressure_history_2
    type: float
    restore_value: yes
    initial_value: 'NAN'
  - id: pressure_history_3
    type: float
    restore_value: yes
    initial_value: 'NAN'
  - id: pressure_history_4
    type: float
    restore_value: yes
    initial_value: 'NAN'
  - id: pressure_history_5
    type: float
    restore_value: yes
    initial_value: 'NAN'
  - id: history_index
    type: int
    restore_value: yes
    initial_value: '0'

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: light
  fast_connect: true
  reboot_timeout: 10min
  ap:
    ssid: "Vonkajsia Stanica Hotspot"
    password: "esp32admin"
    ap_timeout: 3min

time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      - logger.log: "Čas synchronizovaný s Home Assistant."

logger:
  level: DEBUG
  baud_rate: 115200

api:
  id: api_server
  reboot_timeout: 0s

ota:
  platform: esphome
  password: "esp32admin"

web_server:
  port: 80

i2c:
  sda: GPIO22
  scl: GPIO21
  scan: true
  id: busa
  frequency: 100kHz

output:
  - platform: gpio
    pin: { number: GPIO18, mode: { output: true, open_drain: true }, inverted: true }
    id: rain_sensor_power
  - platform: gpio
    pin: { number: GPIO19, mode: { output: true }, inverted: true }
    id: i2c_sensor_power

switch:
  - platform: template
    name: "Napájanie senzorov (SW)"
    id: software_power
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:power
    turn_on_action:
      - logger.log: "Software prepínač zapnutý - zapnutie senzorov"
      - output.turn_on: rain_sensor_power
      - output.turn_on: i2c_sensor_power
    turn_off_action:
      - logger.log: "Software prepínač vypnutý - vypnutie senzorov"
      - output.turn_off: rain_sensor_power
      - output.turn_off: i2c_sensor_power
  - platform: template
    name: "Vynútiť Deep Sleep"
    id: deep_sleep_switch
    optimistic: true
    icon: mdi:sleep
    turn_on_action:
      - logger.log: "Vynucujem prechod do deep sleep..."
      - deep_sleep.enter: deep_sleep_control
    turn_off_action:
      - logger.log: "Prepínač Vynútiť Deep Sleep vypnutý (bez akcie)."

binary_sensor:
  - platform: status
    name: "Vonkajsia Stanica Status"
    id: system_status
  - platform: template
    name: "Detekcia dažďa"
    id: rain_detection
    lambda: |-
      auto sensor = id(rain_sensor_percent);
      if (sensor->has_state()) {
        return sensor->state > 5.0f;
      }
      return false;
    filters:
      - delayed_on: 5s
      - delayed_off: 5s
    device_class: "moisture"
  - platform: template
    name: "Kritická batéria"
    id: low_battery
    device_class: "battery"
    lambda: |-
      auto sensor = id(battery_voltage);
      return sensor && sensor->has_state() && sensor->state < 3.0f;
    filters:
      - delayed_on: 10s
    on_state:
      - if:
          condition:
            binary_sensor.is_on: low_battery
          then:
            - logger.log: "Kritická batéria! Vypínam senzory..."
            - output.turn_off: rain_sensor_power
            - output.turn_off: i2c_sensor_power
            - deep_sleep.enter: deep_sleep_control
  - platform: template
    name: "Predikcia dažďa"
    id: rain_prediction
    device_class: "moisture"
    lambda: |-
      float pressure_history[6] = {
        id(pressure_history_0), id(pressure_history_1), id(pressure_history_2),
        id(pressure_history_3), id(pressure_history_4), id(pressure_history_5)
      };

      auto pressure_sensor = id(bme280_pressure);
      if (!pressure_sensor->has_state()) {
        ESP_LOGD("rain_prediction", "BME280 tlak nemá platný stav.");
        return {};
      }
      float current_pressure = pressure_sensor->state;

      int valid_count = 0;
      float sum = 0.0f;
      for (int i = 0; i < 6; i++) {
        if (!isnan(pressure_history[i])) {
          sum += pressure_history[i];
          valid_count++;
        }
      }

      // Potrebujeme aspoň 3 historické body (15 minút dát) pre zmysluplnú predikciu
      if (valid_count < 3) {
        ESP_LOGD("rain_prediction", "Nedostatok dát v histórii (%d hodnôt).", valid_count);
        return false; // Nedostatok dát, predpokladáme, že neprší
      }

      float avg_pressure = sum / valid_count;
      float pressure_change = current_pressure - avg_pressure;

      ESP_LOGD("rain_prediction", "Priemerný tlak za posledných 30 min: %.2f hPa. Aktuálny tlak: %.2f hPa. Zmena: %.2f hPa.", avg_pressure, current_pressure, pressure_change);

      // Podmienka: významný pokles tlaku
      if (pressure_change < -0.5f) {
        ESP_LOGI("rain_prediction", "Detekovaný významný pokles tlaku (%.2f hPa). Predpoveď dažďa: ÁNO", pressure_change);
        return true;
      } else {
        return false;
      }

deep_sleep:
  run_duration: 60s
  sleep_duration: 5min
  id: deep_sleep_control

script:
  - id: uspat_ltr390
    then:
      - logger.log: "Uspávam LTR390..."
      - lambda: |-
          auto bus = id(busa);
          if (bus) {
            uint8_t standby_cmd[] = {0x00, 0x00};
            if (bus->write(0x53, standby_cmd, sizeof(standby_cmd)) == esphome::i2c::ERROR_OK) {
              ESP_LOGD("custom", "Odoslaný standby príkaz pre LTR390 (0x53)");
            } else {
              ESP_LOGE("custom", "Nepodarilo sa odoslať standby príkaz pre LTR390 (0x53)");
            }
          } else {
            ESP_LOGE("custom", "I2C zbernica 'busa' nenájdená pre LTR390.");
          }

text_sensor:
  - platform: template
    name: "System Diagnostika"
    id: system_diagnostics
    icon: mdi:graph-box
    entity_category: diagnostic
    lambda: |-
      auto batt_volt_sensor = id(battery_voltage);
      auto batt_level_sensor = id(battery_level);
      auto wifi_sensor = id(wifi_signal_strength);
      auto temp_sensor = id(bme280_temperature);
      auto hum_sensor = id(bme280_humidity);
      float battery_voltage_val = batt_volt_sensor && batt_volt_sensor->has_state() ? batt_volt_sensor->state : -1.0f;
      float battery_level_val = batt_level_sensor && batt_level_sensor->has_state() ? batt_level_sensor->state : -1.0f;
      float wifi_signal_val = wifi_sensor && wifi_sensor->has_state() ? wifi_sensor->state : 0.0f;
      float temp_val = temp_sensor && temp_sensor->has_state() ? temp_sensor->state : -99.9f;
      float humidity_val = hum_sensor && hum_sensor->has_state() ? hum_sensor->state : -99.9f;
      char buffer[128];
      snprintf(buffer, sizeof(buffer), "Bat:%.2fV(%.0f%%), WiFi:%.0fdBm, T:%.1fC, H:%.1f%%",
        battery_voltage_val, battery_level_val, wifi_signal_val, temp_val, humidity_val);
      return std::string(buffer);
    update_interval: 1min
  - platform: template
    name: "Odporúčanie oblečenia"
    id: clothing_recommendation
    icon: mdi:hanger
    lambda: |-
      auto rain_pred_sensor = id(rain_prediction);
      auto temp_sensor = id(bme280_temperature);
      auto time = id(homeassistant_time);
      if (!rain_pred_sensor->has_state() || !temp_sensor->has_state() || !time->now().is_valid()) {
        return esphome::optional<std::string>("Čakám na dáta...");
      }
      bool rain_predicted = rain_pred_sensor->state;
      float temperature = temp_sensor->state;
      auto now = time->now();
      bool is_night = now.hour < 6 || now.hour > 20;
      if (rain_predicted) {
        return esphome::optional<std::string>(temperature < 15.0f ? "Vezmi si dáždnik a teplú bundu!" : "Nezabudni na dáždnik!");
      } else {
        if (temperature < 10.0f) {
          return esphome::optional<std::string>(is_night ? "Obleč sa veľmi teplo, je chladná noc!" : "Obleč sa veľmi teplo!");
        } else if (temperature < 20.0f) {
          return esphome::optional<std::string>("Obleč sa teplo.");
        } else {
          return esphome::optional<std::string>("Obleč sa ľahko.");
        }
      }
    update_interval: 30min

sensor:
  # --- Senzory dažďa ---
  - platform: adc
    pin: GPIO34
    id: rain_sensor_voltage
    internal: true
    update_interval: 10s
    accuracy_decimals: 3
    unit_of_measurement: "V"
  - platform: template
    name: "Vlhkosť dažďového senzora"
    id: rain_sensor_percent
    unit_of_measurement: "%"
    accuracy_decimals: 1
    state_class: "measurement"
    icon: "mdi:water-percent"
    lambda: |-
      const float SUCHY_STAV_V = 1.033f;
      const float MOKRY_STAV_V = 0.419f;
      if (id(rain_sensor_voltage).has_state()) {
        float x = id(rain_sensor_voltage).state;
        float percenta = map(x, SUCHY_STAV_V, MOKRY_STAV_V, 0.0f, 100.0f);
        return clamp(percenta, 0.0f, 100.0f);
      } else {
        return {};
      }
    update_interval: 10s

  # --- BME280 Senzory ---
  - platform: bme280_i2c
    address: 0x76
    i2c_id: busa
    id: bme280_sensor
    update_interval: 10s
    temperature:
      name: "Vonkajšia Teplota"
      id: bme280_temperature
    pressure:
      name: "Atmosférický tlak"
      id: bme280_pressure
    humidity:
      name: "Vonkajšia Vlhkosť"
      id: bme280_humidity

  # --- LTR390 (Svetlo a UV) ---
  - platform: ltr390
    address: 0x53
    i2c_id: busa
    id: ltr390_sensor
    update_interval: 10s
    light:
      name: "Intenzita svetla"
      id: ambient_light
    uv:
      name: "UV Senzor (RAW)"
      id: uv_raw_data
      entity_category: diagnostic
    gain: X3
  - platform: template
    name: "UV Index"
    id: uv_index_calculated
    unit_of_measurement: "UVI"
    accuracy_decimals: 1
    state_class: "measurement"
    icon: "mdi:sun-wireless"
    lambda: |-
      if (id(uv_raw_data).has_state()) {
        float raw_uv = id(uv_raw_data).state;
        const float SENSITIVITY = 0.018;
        const float UVI_FACTOR = 1.0f / 0.025f;
        float uvi = (raw_uv * SENSITIVITY * UVI_FACTOR) / 3.0f;
        return clamp(uvi, 0.0f, 15.0f);
      } else {
        return {};
      }
    update_interval: 10s

  # --- Batéria a Systém ---
  - platform: adc
    pin: GPIO35
    name: "Napätie batérie"
    id: battery_voltage
    entity_category: diagnostic
    update_interval: 30s
    attenuation: 12db
    accuracy_decimals: 2
    unit_of_measurement: "V"
    state_class: "measurement"
    device_class: "voltage"
    icon: "mdi:battery-heart-variant"
    filters:
      - multiply: 2.0
      - median: { window_size: 5, send_every: 1 }
      - sliding_window_moving_average: { window_size: 3, send_every: 1 }

  - platform: template
    name: "Úroveň batérie"
    id: battery_level
    entity_category: diagnostic
    unit_of_measurement: "%"
    device_class: "battery"
    lambda: |-
      if (id(battery_voltage).has_state()) {
        float voltage = id(battery_voltage).state;
        const float V_MAX = 4.2f;
        const float V_MIN = 3.0f;
        float level = 100.0f * (voltage - V_MIN) / (V_MAX - V_MIN);
        return clamp(level, 0.0f, 100.0f);
      } else {
        return {};
      }
    update_interval: 30s

  - platform: wifi_signal
    name: "WiFi Signál"
    id: wifi_signal_strength
    update_interval: 60s
    entity_category: diagnostic

# --- Koniec Kódu ---
