# --- Začiatok kódu ---
esphome:
  name: esp32scd41

  on_boot:
    priority: 600
    then:
      - logger.log: "Zariadenie sa spúšťa"
      - output.turn_on: rain_sensor_power
      - output.turn_on: i2c_sensor_power
      - delay: 2s
      - logger.log: "Zariadenie sa spustilo, senzory aktivované"
      - component.update: battery_voltage # Načítaj napätie čím skôr
      - delay: 100ms
      - component.update: bme280_sensor
      - delay: 100ms
      - if:
          condition:
            lambda: |-
              auto sensor = id(bme280_pressure);
              return sensor && sensor->has_state();
          then:
            - logger.log: "Nastavujem počiatočnú kompenzáciu tlaku pre SCD4x cez lambda..."
            - lambda: |-
                auto scd_sensor = id(scd41_sensor);
                auto pressure_sensor = id(bme280_pressure);
                if (pressure_sensor && pressure_sensor->has_state()) {
                  uint16_t pressure_mbar = (uint16_t)pressure_sensor->state;
                  if (scd_sensor) {
                    scd_sensor->set_ambient_pressure_compensation(pressure_mbar);
                    ESP_LOGD("custom", "SCD4x ambient pressure compensation set to: %u mbar", pressure_mbar);
                  } else {
                    ESP_LOGW("custom", "SCD4x sensor object not found during initial pressure compensation.");
                  }
                } else {
                  ESP_LOGW("custom", "BME280 pressure state not available for initial SCD4x compensation.");
                }

  on_shutdown:
    then:
      - logger.log: "Zariadenie sa vypína (prechod do deep sleep)"
      - script.execute: uspat_senzory
      - delay: 500ms
      - output.turn_off: rain_sensor_power
      - output.turn_off: i2c_sensor_power
      - logger.log: "Senzory uspané a vypnuté. Prechod do deep sleep na 5 minút."
      # Prechod do spánku nastane automaticky po 'run_duration'

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: light
  fast_connect: true
  reboot_timeout: 5min

  ap:
    ssid: "ESP32 SCD41 Hotspot"
    password: "esp32admin"
    ap_timeout: 3min

time:
  - platform: homeassistant
    id: homeassistant_time

logger:
  level: DEBUG
  baud_rate: 115200

api:
  id: api_server
  reboot_timeout: 0s

ota:
  platform: esphome
  password: "esp32admin"

web_server:
  port: 80

i2c:
  sda: GPIO22
  scl: GPIO21
  scan: true
  id: busa
  frequency: 100kHz

output:
  - platform: gpio
    pin: { number: GPIO18, mode: { output: true, open_drain: true }, inverted: true }
    id: rain_sensor_power
  - platform: gpio
    pin: { number: GPIO19, mode: { output: true }, inverted: true }
    id: i2c_sensor_power

switch:
  - platform: template
    name: "Napájanie senzorov (SW)"
    id: software_power
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:power
    turn_on_action:
      - logger.log: "Software prepínač zapnutý - zapnutie senzorov"
      - output.turn_on: rain_sensor_power
      - output.turn_on: i2c_sensor_power
    turn_off_action:
      - logger.log: "Software prepínač vypnutý - vypnutie senzorov"
      - output.turn_off: rain_sensor_power
      - output.turn_off: i2c_sensor_power
  - platform: template
    name: "Vynútiť Deep Sleep"
    id: deep_sleep_switch
    optimistic: true
    icon: mdi:sleep
    turn_on_action:
      - logger.log: "Vynucujem prechod do deep sleep..."
      # Spustí 'on_shutdown' sekvenciu a následný deep sleep
      - deep_sleep.enter: deep_sleep_control
    turn_off_action:
      - logger.log: "Prepínač Vynútiť Deep Sleep vypnutý (bez akcie)."

binary_sensor:
  - platform: status
    name: "ESP32 SCD41 Status"
    id: system_status

  - platform: template
    name: "Detekcia dažďa"
    id: rain_detection
    lambda: |-
      auto sensor = id(rain_sensor);
      // Predpoklad: Nižšia hodnota znamená viac vody/vyššiu vodivosť
      // === OPRAVA: Použitý C++ komentár ===
      return sensor && sensor->has_state() && sensor->state < 20; // Prahovú hodnotu možno treba upraviť
    filters:
      - delayed_on: 5s  # Zabráni krátkym falošným poplachom
      - delayed_off: 5s # Zabráni rýchlemu vypnutiu pri kolísaní
    device_class: "moisture" # Indikuje prítomnosť vlhkosti

  - platform: template
    name: "Kritická batéria"
    id: low_battery
    device_class: "battery" # Správna trieda zariadenia pre stav batérie
    lambda: |-
      auto sensor = id(battery_voltage);
      // Používa kalibrovanú hodnotu napätia
      // === OPRAVA: Použitý C++ komentár ===
      return sensor && sensor->has_state() && sensor->state < 3.0; // Prah pre kritické napätie
    filters:
      - delayed_on: 10s # Zabráni krátkodobým poklesom pri záťaži

  - platform: template
    name: "Predikcia dažďa"
    id: rain_prediction
    # Lambda vyhodnocuje zmenu tlaku; update_interval nie je potrebný
    lambda: |-
      static float last_pressure = NAN;
      auto pressure_sensor = id(bme280_pressure);
      if (!pressure_sensor || !pressure_sensor->has_state()) {
        return {}; // Neznámy stav, ak tlak nie je k dispozícii
      }
      float current_pressure = pressure_sensor->state;

      if (isnan(last_pressure)) {
        last_pressure = current_pressure;
        return false; // Pri prvom meraní nie je možné určiť trend
      }

      float pressure_change = current_pressure - last_pressure;
      last_pressure = current_pressure; // Uložiť pre ďalšie porovnanie

      // Predikovať dážď pri poklese tlaku (napr. o 1 hPa za 5s interval BME280)
      // Prahovú hodnotu -1.0 možno treba upraviť podľa lokálnych podmienok
      if (pressure_change < -1.0) {
        ESP_LOGD("rain_prediction", "Pressure drop detected (%.2f hPa). Predicting rain.", pressure_change);
        return true;
      } else {
        return false;
      }
    # device_class: precipitation # Binary sensor nemá túto class, je pre senzor

deep_sleep:
  run_duration: 60s   # Zariadenie bude bežať 1 minútu
  sleep_duration: 5min # Zariadenie bude spať 5 minút
  id: deep_sleep_control

script:
  - id: uspat_scd41
    then:
      - logger.log: "Uspávam SCD41..."
      - lambda: |-
          auto bus = id(busa);
          if (bus) {
            // Príkaz pre SCD4x stop_periodic_measurement
            uint8_t stop_measurement_cmd[] = {0x3F, 0x86};
            if (bus->write(0x62, stop_measurement_cmd, sizeof(stop_measurement_cmd)) == esphome::i2c::ERROR_OK) {
              ESP_LOGD("custom", "Sent stop periodic measurement command to SCD4x (0x62)");
            } else {
              ESP_LOGE("custom", "Failed to send stop measurement command to SCD4x (0x62)");
            }
          } else {
            ESP_LOGE("custom", "I2C bus 'busa' not found for SCD4x sleep command.");
          }
  - id: uspat_ltr390
    then:
      - logger.log: "Uspávam LTR390..."
      - lambda: |-
          auto bus = id(busa);
          if (bus) {
            // Nastavenie LTR390 do standby režimu (Register 0x00, hodnota 0x00)
            uint8_t standby_cmd[] = {0x00, 0x00};
            if (bus->write(0x53, standby_cmd, sizeof(standby_cmd)) == esphome::i2c::ERROR_OK) {
              ESP_LOGD("custom", "Sent standby command to LTR390 (0x53)");
            } else {
              ESP_LOGE("custom", "Failed to send standby command to LTR390 (0x53)");
            }
          } else {
             ESP_LOGE("custom", "I2C bus 'busa' not found for LTR390 sleep command.");
          }
  - id: uspat_senzory
    mode: single # Zabezpečí, že sa kroky vykonajú postupne
    then:
      - script.execute: uspat_scd41
      - delay: 50ms # Krátka pauza
      - script.execute: uspat_ltr390
      - delay: 50ms

text_sensor:
  - platform: template
    entity_category: diagnostic
    name: "Pocitová vlhkosť (podľa ros. bodu)"
    id: dew_point_comfort
    icon: "mdi:water-percent-alert"
    lambda: |-
      auto dew_point_sensor = id(dew_point);
      if (!dew_point_sensor || !dew_point_sensor->has_state()) { return {"Neznámy"}; }
      float dp = dew_point_sensor->state;
      if (isnan(dp)) { return {"Neznámy"}; }
      if (dp <= 10.0) { return {"Suchý"}; }
      else if (dp <= 15.0) { return {"Príjemne vlhký"}; }
      else if (dp <= 20.0) { return {"Dusno"}; }
      else { return {"Veľmi dusno"}; }
    update_interval: 1min # Nemusí sa aktualizovať tak často

  - platform: template
    name: "Tepelný Komfort"
    id: thermal_comfort
    icon: mdi:thermometer-lines
    lambda: |-
      auto temp_sensor = id(bme280_temperature);
      auto hum_sensor = id(bme280_humidity);
      if (!temp_sensor || !temp_sensor->has_state() || !hum_sensor || !hum_sensor->has_state()) { return {"Neznámy"}; }
      float temp = temp_sensor->state;
      float humidity = hum_sensor->state;
      if (isnan(temp) || isnan(humidity)) { return {"Neznámy"}; }

      if (temp >= 20.0 && temp <= 26.0) {
        if (humidity >= 30.0 && humidity <= 60.0) { return {"Optimálne"}; }
        else if (humidity < 30.0) { return {"Suché"}; }
        else { return {"Vlhké"}; }
      } else if (temp < 20.0) { return {"Chladno"}; }
      else { return {"Horúco"}; }
    update_interval: 1min

  - platform: template
    name: "System Diagnostika"
    id: system_diagnostics
    icon: mdi:graph-box
    entity_category: diagnostic
    lambda: |-
      char buffer[250];
      auto batt_volt_sensor = id(battery_voltage);
      auto batt_level_sensor = id(battery_level);
      auto wifi_sensor = id(wifi_signal_strength);
      auto temp_sensor = id(bme280_temperature);
      auto hum_sensor = id(bme280_humidity);
      auto co2_sensor = id(co2concentration);

      // Získanie hodnôt s kontrolou dostupnosti
      float battery_voltage_val = (batt_volt_sensor && batt_volt_sensor->has_state()) ? batt_volt_sensor->state : NAN;
      float battery_level_val = (batt_level_sensor && batt_level_sensor->has_state()) ? batt_level_sensor->state : NAN;
      float wifi_signal_val = (wifi_sensor && wifi_sensor->has_state()) ? wifi_sensor->state : NAN;
      float temp_val = (temp_sensor && temp_sensor->has_state()) ? temp_sensor->state : NAN;
      float humidity_val = (hum_sensor && hum_sensor->has_state()) ? hum_sensor->state : NAN;
      int co2_val = (co2_sensor && co2_sensor->has_state() && !isnan(co2_sensor->state)) ? (int)co2_sensor->state : -1; // -1 pre neznámu CO2

      snprintf(buffer, sizeof(buffer),
        "Bat:%.2fV(%.0f%%),WiFi:%.0fdBm,T:%.1fC,H:%.1f%%,CO2:%dppm",
        isnan(battery_voltage_val) ? -1.0f : battery_voltage_val, // -1.0 pre neznáme napätie
        isnan(battery_level_val) ? -1.0f : battery_level_val,     // -1 pre neznáme percentá
        isnan(wifi_signal_val) ? 0.0f : wifi_signal_val,         // 0 pre neznámy signál
        isnan(temp_val) ? -99.9f : temp_val,                     // -99.9 pre neznámu teplotu
        isnan(humidity_val) ? -99.9f : humidity_val,             // -99.9 pre neznámu vlhkosť
        co2_val);
      return {buffer};
    update_interval: 1min

  - platform: template
    name: "Odporúčanie oblečenia"
    id: clothing_recommendation
    icon: mdi:hanger
    lambda: |-
      auto rain_pred_sensor = id(rain_prediction);
      auto temp_sensor = id(bme280_temperature);

      if (!rain_pred_sensor || !temp_sensor || !rain_pred_sensor->has_state() || !temp_sensor->has_state()) {
        return {"Čakám na dáta..."};
      }

      optional<bool> rain_predicted_opt = rain_pred_sensor->state;
      float temperature = temp_sensor->state;

      if (!rain_predicted_opt.has_value()) { return {"Čakám na dáta tlaku..."}; }
      bool rain_predicted = rain_predicted_opt.value();
      if (isnan(temperature)) { return {"Čakám na dáta teploty..."}; }

      if (rain_predicted) {
        if (temperature < 15) { return {"Vezmi si dáždnik a teplú bundu!"}; }
        else { return {"Nezabudni na dáždnik!"}; }
      } else {
        if (temperature < 10) { return {"Obleč sa veľmi teplo!"}; }
        else if (temperature < 20) { return {"Obleč sa teplo."}; }
        else { return {"Obleč sa ľahko."}; }
      }
    update_interval: 1min # Aktualizovať pri každom prebudení

  - platform: template
    name: "Kvalita Vzduchu"
    id: air_quality_text
    icon: mdi:air-filter
    lambda: |-
      auto co2_sensor = id(co2concentration);
      if (!co2_sensor || !co2_sensor->has_state() || isnan(co2_sensor->state)) { return {"Neznáma"}; }
      int co2_value = (int)co2_sensor->state;
      if (co2_value < 800) { return {"Výborná"}; }
      else if (co2_value < 1000) { return {"Dobrá"}; }
      else if (co2_value < 1500) { return {"Priemerná"}; }
      else if (co2_value < 2000) { return {"Zlá"}; }
      else { return {"Veľmi zlá"}; }
    update_interval: 1min

  - platform: template
    name: "Stav Batérie"
    id: battery_status_text
    icon: mdi:battery-heart-variant
    entity_category: diagnostic
    lambda: |-
      auto batt_volt_sensor = id(battery_voltage);
      if (!batt_volt_sensor || !batt_volt_sensor->has_state() || isnan(batt_volt_sensor->state)) { return {"Neznámy"}; }
      float voltage = batt_volt_sensor->state; // Používa kalibrovanú hodnotu
      if (voltage < 3.0) { return {"Kriticky nízka"}; }
      else if (voltage < 3.3) { return {"Nízka"}; }
      else if (voltage < 3.7) { return {"Stredne nabitá"}; }
      else if (voltage < 4.0) { return {"Dobrá"}; }
      else { return {"Plne nabitá"}; }
    update_interval: 1min

sensor:
  - platform: adc
    pin: GPIO34 # Vstupný pin pre dažďový senzor
    name: "Dážďový senzor"
    id: rain_sensor
    update_interval: 10s # Nemusí merať príliš často počas behu
    accuracy_decimals: 1
    state_class: "measurement"
    unit_of_measurement: "%" # Reprezentuje "vlhkosť" senzora
    filters:
      # Lambda prepočíta napätie z ADC na percentá (0V = 100%, 3.3V = 0%)
      # Môže vyžadovať úpravu podľa rozsahu ADC a správania senzora
      - lambda: 'return clamp((1.0 - (x / 3.3)) * 100.0, 0.0, 100.0);'
      - sliding_window_moving_average: {window_size: 3, send_every: 1}

  - platform: bme280_i2c
    address: 0x76
    i2c_id: busa
    id: bme280_sensor
    update_interval: 10s # Častejšie meranie T/H/P pre aktuálnosť
    temperature:
      name: "BME280 Teplota"
      id: bme280_temperature
      accuracy_decimals: 1
      unit_of_measurement: "°C"
      filters:
        - sliding_window_moving_average: {window_size: 3}
    pressure:
      name: "Atmosférický tlak"
      id: bme280_pressure
      accuracy_decimals: 0
      unit_of_measurement: "hPa"
      filters:
        - sliding_window_moving_average: {window_size: 3}
      on_value:
        # Aktualizácia kompenzácie tlaku pre SCD4x pri každej novej hodnote
        then:
          - lambda: |-
              auto scd_sensor = id(scd41_sensor);
              if (scd_sensor && !isnan(x)) {
                uint16_t pressure_mbar = (uint16_t)x;
                scd_sensor->set_ambient_pressure_compensation(pressure_mbar);
                // ESP_LOGD("custom", "SCD4x ambient pressure compensation updated to: %u mbar", pressure_mbar); // Odkomentovať pre ladenie
              } else if (!scd_sensor) {
                ESP_LOGW("custom", "SCD4x sensor object not found for pressure compensation update.");
              } else {
                ESP_LOGW("custom", "Invalid pressure value (NaN) received, skipping SCD4x compensation.");
              }
    humidity:
      name: "BME280 Vlhkosť"
      id: bme280_humidity
      accuracy_decimals: 1
      unit_of_measurement: "%"
      filters:
        - sliding_window_moving_average: {window_size: 3}

  - platform: scd4x
    address: 0x62
    i2c_id: busa
    id: scd41_sensor
    update_interval: 15s # CO2 sa nemení tak rýchlo, dlhší interval šetrí energiu
    co2:
      name: "Koncentrácia CO2"
      id: co2concentration
      accuracy_decimals: 0
      state_class: "measurement"
      unit_of_measurement: "ppm"
      filters:
        - sliding_window_moving_average: {window_size: 3} # Mierne vyhladenie
      on_value:
        then:
          - if:
              condition:
                lambda: 'return !isnan(x) && x > 1500;'
              then:
                - logger.log:
                    level: WARN
                    format: "Vysoká koncentrácia CO2: %d ppm - odporúčam vetranie!"
                    args: ['(int)x']
    temperature:
      name: "Teplota miestnosti (SCD4x)" # Odlišný názov pre rozlíšenie od BME280
      id: roomtemperature
      accuracy_decimals: 1
      state_class: "measurement"
      unit_of_measurement: "°C"
      # internal: true # Zvážiť, či túto hodnotu treba posielať do HA
    humidity:
      name: "Vlhkosť miestnosti (SCD4x)" # Odlišný názov
      id: roomhumidity
      accuracy_decimals: 1
      state_class: "measurement"
      unit_of_measurement: "%"
      # internal: true # Zvážiť, či túto hodnotu treba posielať do HA
    # automatic_self_calibration: true # Zapni, ak je senzor pravidelne na čerstvom vzduchu

  - platform: ltr390
    address: 0x53
    i2c_id: busa
    id: ltr390_sensor
    update_interval: 15s # Svetlo a UV sa tiež nemenia extrémne rýchlo
    uv:
      name: "UV Index"
      id: uv_index
      accuracy_decimals: 1
      state_class: "measurement"
      filters:
        - sliding_window_moving_average: {window_size: 3}
      on_value:
        then:
          - if:
              condition:
                lambda: 'return !isnan(x) && x > 7.0;'
              then:
                - logger.log:
                    level: WARN
                    format: "Vysoký UV index: %.1f - odporúčaná ochrana proti slnku!"
                    args: ['x']
    light:
      name: "Ambient Light"
      id: ambient_light
      accuracy_decimals: 0
      unit_of_measurement: "lx"
      state_class: "measurement"
      filters:
        - sliding_window_moving_average: {window_size: 3}
    gain: X3 # Nastav podľa očakávaných svetelných podmienok

  - platform: template
    name: "Rosný Bod"
    id: dew_point
    lambda: |-
      auto temp_sensor = id(bme280_temperature); // Použije presnejší BME280
      auto hum_sensor = id(bme280_humidity);
      if (!temp_sensor || !temp_sensor->has_state() || !hum_sensor || !hum_sensor->has_state()) { return NAN; }
      float temp = temp_sensor->state;
      float humidity = hum_sensor->state;
      if (isnan(temp) || isnan(humidity) || humidity <= 0.0 || humidity > 100.0) { return NAN; }

      const float a = 17.62;
      const float b = 243.12;
      float alpha = log(humidity / 100.0) + (a * temp) / (b + temp);
      if (a <= alpha) { return NAN; } // Zabránenie deleniu nulou/záporný logaritmus
      return (b * alpha) / (a - alpha);
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 1
    update_interval: 1min # Odvodená hodnota, stačí menej často

  - platform: adc
    pin: GPIO35 # Pin pripojený k výstupu deliča napätia batérie
    name: "Napätie batérie"
    id: battery_voltage
    entity_category: diagnostic
    update_interval: 30s # Batéria sa nevybíja tak rýchlo
    attenuation: auto    # Alebo '11db' pre rozsah cca 0-3.3V
    accuracy_decimals: 2
    unit_of_measurement: "V"
    state_class: "measurement"
    device_class: "voltage"
    icon: "mdi:battery-heart-variant"
    filters:
      - calibrate_linear:
          # === AKTUALIZOVANÁ KALIBRÁCIA ===
          # Nízky bod (zatiaľ odhad, ideálne zmerať napr. pri 3.3V)
          - 0.46 -> 0.0
          # Vysoký bod podľa tvojho merania:
          - 2.78 -> 4.04
      - median: # Odstráni extrémne výkyvy
          window_size: 5
          send_every: 1
      - sliding_window_moving_average: # Jemné vyhladenie
          window_size: 3
          send_every: 1

  - platform: template
    name: "Úroveň batérie"
    id: battery_level
    entity_category: diagnostic
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: "battery"
    icon: "mdi:battery"
    lambda: |-
      auto batt_volt_sensor = id(battery_voltage);
      if (!batt_volt_sensor || !batt_volt_sensor->has_state() || isnan(batt_volt_sensor->state)) { return NAN; }
      float voltage = batt_volt_sensor->state; // Používa kalibrované napätie

      // Príklad pre Li-ion/LiPo ( upraviť V_MIN/V_MAX podľa tvojej batérie)
      const float V_MAX = 4.2; // Napätie plne nabitej batérie
      const float V_MIN = 3.0; // Napätie považované za vybitú batériu

      float level = 100.0 * (voltage - V_MIN) / (V_MAX - V_MIN);

      // Obmedzenie rozsahu na 0-100%
      if (level > 100.0) level = 100.0;
      if (level < 0.0) level = 0.0;

      return round(level);
    update_interval: 30s # Synchronizovať s battery_voltage

  # Nasledujúce indexové senzory sú redundantné k textovým senzorom,
  # ale môžu byť užitočné pre jednoduchšie automatizácie v HA.
  # Ak ich nepotrebuješ, môžeš ich odstrániť.
  - platform: template
    name: "Bateria Stav (Index)"
    id: battery_status_index
    accuracy_decimals: 0
    entity_category: diagnostic
    lambda: |-
      auto batt_volt_sensor = id(battery_voltage);
      if (!batt_volt_sensor || !batt_volt_sensor->has_state() || isnan(batt_volt_sensor->state)) { return NAN; }
      float voltage = batt_volt_sensor->state;
      if (voltage < 3.0) { return 0.0; }      // Kritická
      else if (voltage < 3.3) { return 1.0; } // Nízka
      else if (voltage < 3.8) { return 2.0; } // Stredná
      else { return 3.0; }                    // Dobrá/Plná
    update_interval: 30s

  - platform: template
    name: "Index Kvality Vzduchu (CO2)"
    id: air_quality_index_co2
    icon: mdi:molecule-co2
    accuracy_decimals: 0
    lambda: |-
      auto co2_sensor = id(co2concentration);
      if (!co2_sensor || !co2_sensor->has_state() || isnan(co2_sensor->state)) { return NAN; }
      float co2 = co2_sensor->state;
      if (co2 < 800) { return 1.0; }      // Výborná
      else if (co2 < 1000) { return 2.0; } // Dobrá
      else if (co2 < 1500) { return 3.0; } // Priemerná
      else if (co2 < 2000) { return 4.0; } // Zlá
      else { return 5.0; }                 // Veľmi zlá
    update_interval: 1min

  - platform: wifi_signal
    name: "WiFi Signál"
    id: wifi_signal_strength
    update_interval: 30s # Nemusí sa merať veľmi často
    unit_of_measurement: "dBm"
    entity_category: diagnostic
    icon: mdi:wifi

  - platform: uptime
    name: "ESP32 SCD41 Uptime"
    update_interval: 1min # Stačí raz za minútu
    # Filter prevádza sekundy na minúty
    filters:
      - lambda: 'return x / 60.0;'
    unit_of_measurement: "min"
    entity_category: diagnostic
    icon: mdi:clock-outline

  - platform: template
    name: "Odhadovaná spotreba energie"
    id: power_consumption
    unit_of_measurement: "mW"
    icon: mdi:flash-outline
    accuracy_decimals: 1
    entity_category: diagnostic
    lambda: |-
      auto batt_volt_sensor = id(battery_voltage);
      float voltage = NAN;
      if (batt_volt_sensor && batt_volt_sensor->has_state() && !isnan(batt_volt_sensor->state)) {
         voltage = batt_volt_sensor->state; // Použije kalibrované napätie
      }
      if (isnan(voltage)) { return NAN; }

      auto sw_power = id(software_power);
      if (sw_power) {
        // *** Tieto hodnoty sú len ODHAD, NUTNÉ ZMERAŤ! ***
        const float CURRENT_SENSORS_ON = 45.0; // Prúd (mA) keď sú senzory zapnuté
        const float CURRENT_SENSORS_OFF = 25.0;// Prúd (mA) keď sú I2C/Rain senzory vypnuté (len ESP+WiFi?)

        if (sw_power->state) { // Ak je SW prepínač zapnutý
          return voltage * CURRENT_SENSORS_ON; // P = U * I
        } else {
          return voltage * CURRENT_SENSORS_OFF;
        }
      } else {
        ESP_LOGW("power_consumption", "Software power switch 'software_power' not found!");
        return NAN;
      }
    update_interval: 30s

# --- Koniec kódu ---
